#!/bin/bash

### BEGIN SUBROUTINE INFO
# Required-Var:      $# > 1
# Short-Description: simple die function
#   $1 is the exit code
#   $@ echoed output
### END SUBROUTINE INFO

die() {

    local exitcode=$1
    shift

    echo "$@" >&2
    exit $exitcode
}

### BEGIN SUBROUTINE INFO
# Provides-Var:      $cfdir
# Required-Var:      $1
# Suggests-Var:      $2
# Short-Description: set the config directory
#   $1 is the chosen config directory (can be empty)
#   $2 is the variable name to store stdout
### END SUBROUTINE INFO

set_cfdir() {

    cfdir=$1

    # use FAI_ETC_DIR from environment variable
    if [ -n "$FAI_ETC_DIR" -a -z "$cfdir" ]; then
        # Redirect echo without eval
        # If variable name is set redirect fd 3 to stdin, else to stdout
        if [ -n "$2" ]; then exec 3>&0 ; else exec 3>&1 ; fi
        echo "Using environment variable \$FAI_ETC_DIR." 1>3
        [ -n "$2" ] && read "$2" 0<3
        exec 3>&- # close fd 3
    fi
    [ -z "$cfdir" ] && cfdir=${FAI_ETC_DIR:=/etc/fai}
    cfdir=$(readlink -f $cfdir) # canonicalize path
    [ -d "$cfdir" ] || die 6 "$cfdir is not a directory"
}

### BEGIN SUBROUTINE INFO
# Provides-Var:
# Required-Var:      $@ (list of config files to source)
# Suggested Var:     $cfdir
# Short-Description: sources the config files and their corresponding defaults
#
# If the first argument is a directory, read config from this directory.
#
### END SUBROUTINE INFO

read_cfg() {

    local loc_cfdir=$1
    local defaultsfile
    local etcfile

    if [ -d "$1" ]; then
        shift
    else
        loc_cfdir=${cfdir}
    fi
    if [ ! -d "${loc_cfdir}" ]; then
        die 6 "${loc_cfdir} is not a directory"
    fi

    for cfgfile in $@; do
        defaultsfile="/usr/share/fai/$cfgfile.defaults"
        etcfile="${loc_cfdir}/$cfgfile"
        [ -f "$defaultsfile" ] || die 8 "Can't read $defaultsfile"
        [ -f "$etcfile" ] || die 8 "Can't read $etcfile"
        . "$defaultsfile"
        . "$etcfile"
    done
}
