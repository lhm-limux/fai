#! /bin/bash

#*********************************************************************
#
# fai-make-nfsroot -- create nfsroot directory and add additional packages
#
# This script is part of FAI (Fully Automatic Installation)
# (c) 2000-2012 by Thomas Lange, lange@informatik.uni-koeln.de
# Universitaet zu Koeln
# (c) 2004      by Henning Glawe, glaweh@physik.fu-berlin.de
# Freie Universitaet Berlin
#
#*********************************************************************
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# A copy of the GNU General Public License is available as
# `/usr/share/common-licences/GPL' in the Debian GNU/Linux distribution
# or on the World Wide Web at http://www.gnu.org/copyleft/gpl.html.  You
# can also obtain it by writing to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
#*********************************************************************

. /usr/lib/fai/subroutines-tools

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
usage() {

    cat <<-EOF
	Copyright (C) 1999-2012 Thomas Lange

	Usage: fai-make-nfsroot [OPTIONS]
	Create an NFSROOT for FAI.
	Read the man pages pages fai-make-nfsroot(8).
EOF
    exit 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
die() {

    local e=$1   # first parameter is the exit code
    shift

    echo "ERROR: $@"
    echo "Log file written to /var/log/fai/fai-make-nfsroot.log"
    exit $e
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
check_nfsroot() {

    set +e
    # simple test, to see if important thing are available inside the nfsroot
    if [ "$NFSROOT_ROOTDIR" = "/live/filesystem.dir" ]; then
        [ -x $NFSROOT/usr/share/initramfs-tools/scripts/live ] || die 1 "live-boot was not installed inside the nfsroot."
    fi

    echo "FAI packages inside the nfsroot:"
    $ROOTCMD dpkg-query -W -f='${Package;-18} ${Version}\n' fai-client fai-nfsroot fai-setup-storage 2>/dev/null
    echo "FAI related packages inside the nfsroot:"
    $ROOTCMD dpkg-query -W -f='${Package;-18} ${Version}\n' live-boot dracut-network dracut 2>/dev/null

    local files=$(ls $NFSROOT/boot/initrd* 2>/dev/null)
    [ -z "$files" ] && die 1 "No initrd installed."
    egrep -q "^ERROR: |^E: Sub-process |^dpkg: error processing |^dpkg: dependency problems" /var/log/fai/fai-make-nfsroot.log && bad_exit
    return 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
badupdateto32() {

    cat <<-EOF
	It seems that you have updated an older FAI version without checking files in /etc/fai/
	Please check the NEWS file for changes in variable names and if you have a linux-image package
	defined in /etc/fai/NFSROOT.
EOF
    die 1 $@
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

PATH=/usr/local/bin:/usr/local/sbin:/bin:/sbin:/usr/bin:/usr/sbin

merror="properly"
exitcode=0
sshpreserve=0
adjust=0
generic=0
force=0
nobase=0
symlink=0

callname=${0##*/}
if [ $callname = make-fai-nfsroot ]; then
    echo "make-fai-nfsroot is now called fai-make-nfsroot."
    echo "In the future only fai-make-nfsroot will be available."
fi

# option e currently does nothing
while getopts aghervC:B:fkKpUNS opt ; do
    case "$opt" in
        a) adjust=1 ;;
        g) generic=1 ;;
        C) cfdir=$OPTARG ;;
        B) basetgz=$OPTARG ;;
        v) verbose=1 ; v=-v ;;
        U) die 1 "Option -U is not supported any more." ;;
        r) die 1 "Option -r is not supported any more." ;;
        f) force=1 ;;
        k) kinstall=1 ;;
        K) kremove=1;;
        h) usage ;;
        e) expert=1 ;; # a dummy option, that only fai-setup uses
        p) sshpreserve=1 ;;
        N) nobase=1 ;;
        S) symlink=1 ;;
        ?) exit 5 ;; # error in option parsing
    esac
done

[ $(id -u) != "0" ] && die 9 "Run this program as root."

set -e
shopt -s nullglob

# get configuration directory
set_cfdir "$cfdir"
[ "$verbose" ] && echo "Using configuration files from $cfdir"

# read config files for this tool
. /usr/lib/fai/subroutines-tools
read_cfg "fai.conf" "nfsroot.conf"

# IMO this may be removed, since all information should be included into sources.list
[ -n "$FAI_LOCAL_REPOSITORY" ] && die "The use of \$FAI_LOCAL_REPOSITORY is now deprecated. Please include this information into sources.list."
[ -n "$packages" ] && badupdateto32 "The use of \$packages in nfsroot.conf is now deprecated. Please include this information into $cfdir/NFSROOT."
[ -n "$NFSROOT_PACKAGES" ] && die 1 "The use of \$NFSROOT_PACKAGES in nfsroot.conf is now deprecated. Please include this information into $cfdir/NFSROOT."
[ -n "$FAI_SOURCES_LIST" ] && die 1 "The use of \$FAI_SOURCES_LIST is deprecated. Please use sources.list now."

[ -z "$NFSROOT" ] && die 1 "\$NFSROOT is not set. Please check your settings in $cfdir/nfsroot.conf."
[ -z "$TFTPROOT" ] && badupdateto32 "\$TFTPROOT is not set. Please check your settings in $cfdir/nfsroot.conf."
[ -n "$KERNELPACKAGE" ] && badupdateto32 "The use of \$KERNELPACKAGE is deprecated. Please use $cfdir/NFSROOT now."
[ ! -d "$cfdir/apt" ] && die 1 "$cfdir/apt/ does not exists. Can't continue."
[ -n "$FAI_BOOT" ] && die 1 "Variable \$FAI_BOOT is not supported any more. Will only set up TFTP environment."

NFSROOT=$(readlink -m "${NFSROOT}/${NFSROOT_ROOTDIR}")

export ROOTCMD="chroot $NFSROOT"
export DEBIAN_FRONTEND=noninteractive
export LOGDIR=$NFSROOT/var/tmp
export FAI_ROOT=$NFSROOT
export target=$NFSROOT

usexz=0
if [ -x "$(which xz)" ]; then
    usexz=1
fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
adjust_nfsroot() {

    # add install server specific data (like network parameters) into the nfsroot
    # a generic nfsroot must already be available
    trap '' EXIT
    add_etc_hosts_entries
    copy_fai_files
    exit 0
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
bad_exit() {

    merror="with errors"
    exitcode=1
    echo "An error occured during fai-make-nfsroot."
    echo "Please fix the error or try fai-make-nfsroot -v"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
call_verbose() {

    if [ "$verbose" ]; then
        "$@"
        return $?
    else
        "$@" > /dev/null
        return $?
    fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
setup_ssh() {

    # nothing to do if no ssh is available in nfsroot
    [ -f $NFSROOT/usr/bin/ssh ] || return 0
    if [ $sshpreserve = 1 ]; then
        tar -C $NFSROOT -xf $tmptar
        rm $tmptar
        return 0
    fi

    mkdir -p -m 700 $NFSROOT/root/.ssh
    if [ -n "$LOGUSER" ] ; then
        loguserhome=$(eval "cd ~$LOGUSER 2>/dev/null && pwd;true")
        [ -f $loguserhome/.ssh/known_hosts ] && cp $loguserhome/.ssh/known_hosts $NFSROOT/root/.ssh/known_hosts
        [ -d $loguserhome/.ssh ] && {
            [ -f $loguserhome/.ssh/id_dsa ] &&
               cp -p $loguserhome/.ssh/id_dsa* $NFSROOT/root/.ssh/
            [ -f $loguserhome/.ssh/id_rsa ] &&
               cp -p $loguserhome/.ssh/id_rsa* $NFSROOT/root/.ssh/
        }
    fi

    # enable root login
    sed -i -e 's/PermitRootLogin no/PermitRootLogin yes/' $NFSROOT/etc/ssh/sshd_config
    if [ -f "$SSH_IDENTITY" ]; then
        install -m0644 $SSH_IDENTITY $NFSROOT/root/.ssh/authorized_keys
        echo You can log into install clients without password using $SSH_IDENTITY
    fi

# seting StrictHostKeyChecking to no inside the nfsroot would enable
# easy login to the install server even if the host key is not known

}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
copy_fai_files() {

    [ $generic = 1 ] && return # do nothing here if we generate a generic nfsroot

    # Set chroot root password for SSH access during install
    $ROOTCMD usermod -p "$FAI_ROOTPW" root

    # remove some files that should not be copied
    rm -f $NFSROOT/etc/fai/nfsroot.conf

    # We need the local FAI configuration
    mkdir -p $NFSROOT/etc/fai
    cp $v $cfdir/fai.conf $NFSROOT/etc/fai
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
call_debootstrap() {

    [ -z "$FAI_DEBOOTSTRAP" ] && die 4 "\$FAI_DEBOOTSTRAP not defined."

    # check if NFSROOT directory is mounted with bad options
    fs=$(df -P $NFSROOT | tail -1 | awk '{print $6}')
    if mount | grep "on $fs " |  awk '{print $6}' | egrep -q "nosuid|nodev"; then
        die 1 "NFSROOT directory $NFSROOT is mounted using nosuid or nodev. Aborting"
    fi
    local dversion=$(dpkg -l debootstrap | awk '/debootstrap/ {print $3}')
    echo "Creating base system using debootstrap version $dversion"
    [ "$verbose" ] && echo "Calling debootstrap $FAI_DEBOOTSTRAP_OPTS $1 $NFSROOT $2 $3"
    LC_ALL=C call_verbose debootstrap $FAI_DEBOOTSTRAP_OPTS $1 $NFSROOT $2 $3
    if [ $? -ne 0 ]; then
        echo "ERROR: debootstrap did not complete successfully."
        echo "This is mostly caused by a broken mirror."
        echo "Please check your mirror or use an official mirror."
        [ "$verbose" ] || echo "Call fai-make-nfsroot -v for better debugging."
        exit 10
    fi

    if [ ! -f $NFSROOT/usr/bin/apt-get ]; then
        echo "No apt-get executable available inside the NFSROOT."
        echo "Maybe debootstrap did not finish successfully. Aborting."
        [ "$verbose" ] || echo "Call fai-make-nfsroot -v for better debugging."
        exit 11
    fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
add_etc_hosts_entries() {

    # some default entries
    ainsl -as $v $NFSROOT/etc/hosts "127.0.0.1 localhost"
    ainsl     $v $NFSROOT/etc/hosts "# Following entries are specific to your environment"
    ainsl     $v $NFSROOT/etc/hosts "$NFSROOT_ETC_HOSTS"

    # add entries for all network devices
    local ips=$(ip addr show up| grep -w inet | cut -d t -f 2 | cut -d ' ' -f 2 | cut -d / -f 1 | grep -v 127.0.0.1)

    local line
    for eth in $ips; do
        line=$(getent hosts $eth || true)
        if [ -n "$line" ] ; then
            ainsl $v $NFSROOT/etc/hosts "$line"
        else
            echo "Warning: no hostname for $eth found, not adding to /etc/hosts."
        fi
    done

    if [ -f /etc/resolv.conf ]; then
        cp -Lp $v /etc/resolv.conf $NFSROOT/etc/resolv.conf-installserver
        cp -Lp $v /etc/resolv.conf $NFSROOT/etc/resolv.conf # this is needed during fai-make-nfsroot
    fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
create_base() {

    [ ! -x "$(which debootstrap)" ] && die 1 "Can't find debootstrap command. Aborting."
    call_debootstrap $FAI_DEBOOTSTRAP
    fdivert /usr/sbin/update-grub
    $ROOTCMD apt-get clean
    rm -f $NFSROOT/etc/resolv.conf $NFSROOT/etc/hostname $NFSROOT/etc/udev/rules.d/70-persistent-net.rules
    [ $nobase -eq 1 ] && return
    if [ $usexz -eq 0 ]; then
        echo "Creating base.tar.gz"
    else
        echo "Creating base.tar.xz"
    fi
    tar --one-file-system -C $NFSROOT -cf $NFSROOT/var/tmp/base.tar --exclude var/tmp/base.tar --exclude 'var/lib/apt/lists/*_*' .
    if [ $usexz -eq 1 ]; then
        nice xz -q $NFSROOT/var/tmp/base.tar &
    else
        nice gzip $NFSROOT/var/tmp/base.tar &
    fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
extract_base() {

    if [ ! -r "$basetgz" ] ; then
      die "Specified $basetgz could not be used."
    fi

    if cd $NFSROOT ; then
      printf "Extracting $basetgz: "
      case $basetgz in
          *tar.gz|*.tgz)
              tar -C $NFSROOT -zxpf "$basetgz" || die 1 "Error while extracting ${basetgz} in ${NFSROOT}."
              cp -p "$basetgz" $NFSROOT/var/tmp/base.tar.gz
              ;;

            *tar.xz|*.txz)
              tar -C $NFSROOT -Jxpf "$basetgz" || die 1 "Error while extracting ${basetgz} in ${NFSROOT}."
              cp -p "$basetgz" $NFSROOT/var/tmp/base.tar.xz
              ;;
          esac
      echo done
    fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
upgrading_nfsroot() {

    local iarch=$($ROOTCMD dpkg --print-architecture|tr /a-z/ /A-Z/)

    echo "Applying debconf data"
    export classes="NFSROOT $iarch"
    LC_ALL=C call_verbose fai-debconf $v $cfdir

    echo "Upgrading $NFSROOT"
    # add any 3rd party repository keys that you may need installed into the NFSROOT
    if [ -d $cfdir/apt/keys ]; then
        local f
        for f in `find $cfdir/apt/keys -type f -name *.asc`; do
            [ "$verbose" ] && echo "Adding APT key $(basename $f)"
            cat $f | $ROOTCMD apt-key add - >/dev/null
        done
    fi

    call_verbose $ROOTCMD apt-get update
    # fai-nfsroot just needs to be installed initially
    if [ "$1" = "init" ]; then
        LC_ALL=C call_verbose $ROOTCMD aptitude -Rfy install fai-nfsroot nfs-common
    fi
    LC_ALL=C call_verbose $ROOTCMD apt-get -y dist-upgrade

    # Adding packages from NFSROOT and $iarch class
    LC_ALL=C add_packages_nfsroot
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
bootstraping_nfsroot() {
    mkdir -p $NFSROOT/$FAI
    cd $NFSROOT || die 1 "Can't cd to $NFSROOT"

    if [ -n "$basetgz" ] ; then
      extract_base
    else
      create_base
    fi
    touch .THIS_IS_THE_FAI_NFSROOT

    # save the list of all packages in the base.tar.gz
    if [ $nobase -eq 0 ]; then
        $ROOTCMD dpkg --get-selections | awk '/install$/ {print $1}' > var/tmp/base-pkgs.lis
    fi

    # liloconfig, dump needs these files
    echo "# UNCONFIGURED FSTAB FOR BASE SYSTEM" > etc/fstab

    # we need these option before installing the first package. So we
    # can't put this into fai-nfsroot /etc/apt/apt.conf.d/90fai
    cat <<EOF >$NFSROOT/etc/apt/apt.conf.d/10fai
APT::Get::AllowUnauthenticated true;
Aptitude::CmdLine::Ignore-Trust-Violations yes;
Acquire::Languages none;
EOF

    add_etc_hosts_entries

    # overwrite default live.conf
    if [ "$NFSROOT_ROOTDIR" = "/live/filesystem.dir" ]; then
        [ -f $cfdir/live.conf ] || die 1 "$cfdir/live.conf not found."
        cp -Lp $cfdir/live.conf etc/live.conf
    fi

    # this copies sources.list into the nfsroot
    cp -La $v $cfdir/apt $NFSROOT/etc
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
configuring_nfsroot() {

    cd $NFSROOT || die 1 "Can't cd to $NFSROOT"

    copy_fai_files

    # set timezone in nfsroot
    cp -H /etc/timezone  etc/timezone
    cp -H /etc/localtime etc/localtime
    ln -sf /proc/mounts etc/mtab

    [ -f etc/init/tty1.conf ] || ln -s /usr/sbin/fai etc/init.d/rcS
    if [ -d etc/init ]; then   # if upstart is available
        find etc/init ! -type d | egrep -v "fai|udev|hostname|mountall|mounted" | xargs -r rm
    fi

    # create an empty mdadm.conf, otherwise it may contain data from the server
    echo > etc/mdadm/mdadm.conf

    # we don't need any persistent net devices
    rm -f etc/udev/rules.d/70-persistent-net.rules

    # remove Ubuntu-specific rules to auto-start volume groups, which confuses
    # setup-storage
    rm -f lib/udev/rules.d/85-lvm2.rules

    # definition for loopback device
    echo "iface lo inet loopback" > etc/network/interfaces

    cat >> root/.profile <<-EOF

PATH=/usr/local/sbin:/usr/local/bin:/usr/lib/fai:/bin:/sbin:/usr/bin:/usr/sbin
export PATH
. /usr/lib/fai/subroutines
set -a
. /tmp/fai/variables.log 2>/dev/null
EOF

    call_verbose setup_ssh
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
mount_dirs() {

    mount --bind  /proc     $NFSROOT/proc
    mount --bind  /sys      $NFSROOT/sys
    mount --bind  /dev      $NFSROOT/dev
    mount --bind  /dev/pts  $NFSROOT/dev/pts
    mount --bind  /dev/shm  $NFSROOT/dev/shm
    /usr/lib/fai/mkramdisk $v $NFSROOT/var/lib/dpkg

    if [ -n "$FAI_DEBMIRROR" ]; then
        [ "$verbose" ] && echo "Mounting $FAI_DEBMIRROR to $NFSROOT/$MNTPOINT."
        mkdir -p $NFSROOT/$MNTPOINT
        mount -o ro,noatime $FAI_DEBMIRROR $NFSROOT/$MNTPOINT || \
                die 1 "Can't mount $FAI_DEBMIRROR to $NFSROOT/$MNTPOINT."
    fi

    # Work around Ubuntu's failure in installing rsyslog with
    # "start: Unable to connect to Upstart: Failed to connect to
    # socket /com/ubuntu/upstart: Connection refused"
    if $ROOTCMD test -x /usr/sbin/dpkg-divert && [ -x $NFSROOT/sbin/initctl ] ; then
        LC_ALL=C call_verbose $ROOTCMD dpkg-divert --quiet --add --rename /sbin/initctl
        ln -sf /bin/true $NFSROOT/sbin/initctl
        INITCTL_DIVERT=1
    fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
umount_dirs() {

    # get rid of initctl divert
    if [ "$INITCTL_DIVERT" ] ; then
        rm -f $NFSROOT/sbin/initctl
        LC_ALL=C call_verbose $ROOTCMD dpkg-divert --rename --remove /sbin/initctl
    fi

    cd /
    [ -d $NFSROOT/proc/self ] && umount $NFSROOT/proc
    [ -d $NFSROOT/sys/class ] && umount $NFSROOT/sys
    [ -d $NFSROOT/proc/self ] && die 1 "/proc still mounted inside the nfsroot."
    umount $NFSROOT/dev/pts 2> /dev/null || true
    umount $NFSROOT/dev/shm 2> /dev/null || true
    umount $NFSROOT/dev     2> /dev/null || true

    /usr/lib/fai/mkramdisk $v -u $NFSROOT/var/lib/dpkg || true

    DEBMIRROR_MNT=$(readlink -m "$NFSROOT/$MNTPOINT")
    if [ -n "$FAI_DEBMIRROR" ] && [ mountptoint "$DEBMIRROR_MNT" >/dev/null 2>&1 ] ; then
        umount "$DEBMIRROR_MNT" || true
    fi

    # show directories still mounted on nfsroot
    mount | grep " on $NFSROOT " || true
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
add_packages_nfsroot() {

    echo -n "Adding additional packages to $NFSROOT"
    if [ "$verbose" ]; then
        install_packages -l -p$cfdir > $LOGDIR/packages.nfsroot
        echo -n ": " $(< "$LOGDIR"/packages.nfsroot)
    else
        echo
    fi
    call_verbose install_packages -N $v -p$cfdir
    local ipexitcode=$?
    if [ "$verbose" -o $ipexitcode -ne 0 ] ; then
        echo "install_packages exit code: $ipexitcode"
    fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
symlink_kernels() {
    local KVER=""
    local NKVER
    local kfile=${1}

    [ "$verbose" ] && echo "Creating kernel and initrd symlinks"

    # cleanup pending symlinks in TFTPROOT
    for file in `ls -1 $TFTPROOT/*`; do
        if [ -h "$file" -a ! -e "$file" ]; then
            rm -f "$file"
        fi
    done

    # symlink kernels
    [ "$verbose" ] && echo -n "Kernels:"
    for KERN in `ls -1 $NFSROOT/boot/$kfile-*`; do
        ln -sf $KERN $TFTPROOT
        NKVER=$(basename ${KERN})
        NKVER=${NKVER#vmlinu?-}
        [ "$verbose" ] && echo -n " $NKVER"
        if [ "x" != "x$KVER" ]; then
            dpkg --compare-versions $NKVER gt $KVER
            if [ $? -eq 0 ]; then
                KVER=$NKVER
            fi
        else
            KVER=$NKVER
        fi

        INITRD="$(dirname ${KERN})/initrd.img-$NKVER"
        for INITRD in "$(dirname ${KERN})/initrd.img-$NKVER" \
                      "$(dirname ${KERN})/initramfs-${NKVER}.img"
        do
            if [ -e "$INITRD" ]; then
                ln -sf $INITRD $TFTPROOT
                break
            fi
        done
    done
    [ "$verbose" ] && echo

    # create default links
    rm -f $TFTPROOT/$kfile-install
    rm -f $TFTPROOT/initrd.img-install

    if [ -e "$TFTPROOT/$kfile-$KVER" ]; then
        echo "Linking default kernel: $KVER"

        # default kernel
        ln -sf $kfile-$KVER $TFTPROOT/$kfile-install

        if [ -e "$TFTPROOT/initrd.img-$KVER" ]; then
            # default initrd
            ln -s initrd.img-$KVER $TFTPROOT/initrd.img-install
        fi
    else
        echo "Warning - no kernel found!"
    fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
setup_tftp(){

    echo "Preparing TFTP environment..."

    local pxebin=$NFSROOT/usr/lib/syslinux/pxelinux.0
    local kfile=`basename $(ls -1 $NFSROOT/boot/vmlinu?-* | head -n 1)`
    kfile=${kfile%%-*}

    rm -f $NFSROOT/boot/*.bak
    mkdir -p $TFTPROOT/pxelinux.cfg
    chmod a+r $NFSROOT/boot/initrd.img-*
    if [ 1 -eq $symlink ]; then
        symlink_kernels "${kfile}"
    else
        cp -pv $NFSROOT/boot/${kfile}-* $NFSROOT/boot/initrd.img-* $TFTPROOT
    fi
    [ -f $TFTPROOT/pxelinux.0 ] || cp $pxebin $TFTPROOT
    if [ "$verbose" ]; then
        echo "TFTP environment prepared. To use it, enable the dhcpd and start a TFTP daemon on root $TFTPROOT."
    fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
fdivert() {

    local item
    for item in "$@"; do
        LC_ALL=C $ROOTCMD dpkg-divert --quiet --add --rename $item
    done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
run_hooks() {

    local file
    [ -z "$NFSROOT_HOOKS" ] && return 0
    [ -d "$NFSROOT_HOOKS" ] || return 0

    echo "Running hooks..."
    for file in $(cd $NFSROOT_HOOKS ;ls 2>/dev/null | egrep '^[[:alnum:]_.-]+$'); do
        if [ -f $NFSROOT_HOOKS/$file ]; then
            . $NFSROOT_HOOKS/$file
        fi
    done
}
# - - - - - - - - - - - - - - - - - - - - - - - - - -
# main routine

trap 'echo "Aborting";umount_dirs' EXIT
trap "bad_exit" ERR

[ $adjust = 1 ] && adjust_nfsroot

# remove all kernels from nfsroot
[ -n "$kremove" ] && {
    echo "Removing all kernels from NFSROOT."
    $ROOTCMD aptitude -y purge ~nlinux-image
    exit
}

# just update the nfsroot from class
[ -n "$kinstall" ] && {
    echo "Upgrading nfsroot and installing new packages into the nfsroot."
    mount_dirs
    upgrading_nfsroot
    setup_tftp
    run_hooks
    umount_dirs
    trap "true" EXIT
    echo "fai-make-nfsroot finished $merror."
    exit $exitcode
}

# repeat message, so it will appear in the log file
rm -f  /var/log/fai/fai-make-nfsroot.log
[ "$verbose" ] && echo "Using configuration files from $cfdir" > /var/log/fai/fai-make-nfsroot.log

{
if [ -d $NFSROOT ] && [ "$force" -ne 1 ] ; then
    echo "-----------------------------------------------------------------"
    echo "Error: $NFSROOT exists already." >&2
    echo "Neither force nor update option present, exiting." >&2
    echo "-----------------------------------------------------------------"
    echo "NOTE: Use -f option to force overwriting an existing nfsroot."
    echo "      Use -k option to update/install packages defined in NFSROOT config."
    exit 1
fi

echo "Creating FAI nfsroot in $NFSROOT"

if [ $sshpreserve = 1 ]; then
    [ "$verbose" ] && echo "Preserving root/.ssh directory from inside the nfsroot."
    # save old .ssh directory
    tmptar=$(mktemp) || die 12 "Cannot create tmp file"
    # should we set the umask before? Does it influence the other parts?
    tar -C $NFSROOT -cf $tmptar root/.ssh
fi

if [ -d $NFSROOT/proc ]; then
    echo $NFSROOT already exists. Removing it.

    umount_dirs

    oldnfsroot="$(dirname $NFSROOT)/.$(basename $NFSROOT).will-now-be-deleted"
    if [ ! -e "$oldnfsroot" ]; then
        mv $NFSROOT $oldnfsroot
    else
        echo "Also removing old nfsroot from previous rm run."
    fi
    if [ -d "$oldnfsroot" ]; then
        # remove old nfsroot using a background process
        nice rm -rf $oldnfsroot &
    fi
    if [ -d "$NFSROOT/proc" ]; then
        rm -rf $NFSROOT
    fi
    mkdir $NFSROOT
fi

bootstraping_nfsroot
mount_dirs
upgrading_nfsroot "init"
configuring_nfsroot
setup_tftp
call_verbose setup_ssh
run_hooks
check_nfsroot

if [ $generic = 1 ]; then
    # remove fai.conf which comes from package fai-client
    rm -f $NFSROOT/etc/hosts $NFSROOT/etc/resolv.conf* $NFSROOT/etc/fai/fai.conf
    ainsl -as $v $NFSROOT/etc/hosts "127.0.0.1 localhost"
fi

umount_dirs

# Wait for background jobs to finish
BGJOBS=$(jobs -p)
if [ -n "$BGJOBS" ]; then
    echo "Waiting for background jobs to finish"
    jobs
    for job in $BGJOBS; do
        wait $job
    done
fi

echo "fai-make-nfsroot finished $merror."
exit $exitcode
} 2>&1 | tee -a /var/log/fai/fai-make-nfsroot.log
RC=${PIPESTATUS[0]}
verbose=0; v=
umount_dirs
trap "true" EXIT
echo "Log file written to /var/log/fai/fai-make-nfsroot.log"
exit ${RC}
